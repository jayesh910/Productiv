To make containerized app portable we use configmaps.


Container images are build to be portable

You should have a custom configuration . This can vary from company to company.
We can apply this custom config. in diff ways:
	1. Configuration files(we can copy t - he config files in contAINERs)
	2. Command line arguments
	3. Environment variables
FORMATS : INI - XML - Json

Configmaps allows to keep the config separate from pods and components. and prevents hardcore changes.
Stores data as key-value pairs.

If you want to hide the data , you can use secrets which contain sensitive information.
Make sure you have created a configmap before running pod.


				SYNTAX of ConfigMaps

We can create configmaps in datasource such as directories, files and literals


=======================================================================================

		DEMO on ConfigMaps:

PART-1 :

>>> kubectl get nodes
>>> kubectl get pods
>>> kubectl get configmaps 			#to make sure no resources are present .


cd configmaps
first create two files :1. file-1.txt (Non-sensitive data inside file-1)	2. file-2.txt(Non-sensitive data inside file-2)
>>> kubectl create configmap nginx-configmap-vol --from-file=file-1.txt --from-file=file-2.txt 
>>> kubectl get configmap
	configmap/nginx-configmap-vol created

Till here configmap is created successfully.

Now create POD file: 
>>> nginx-pod-configmap-vol.yaml
	apiVersion: v1
	kind: Pod
	metadata:
	  name: nginx-pod-configmap-vol
	spec:
	  containers:
	  - name: nginx-pod
	    image: nginx
	    volumeMounts:
	    - name: test-vol
	      mountPath: "/etc/non-sensitive-data"
	      readOnly: true
	  volumes:
	    - name: test-vol
	      configMap:
	        name: nginx-configmap-vol
		items:
		- key: file-1.txt
		  path: file-a.txt
		- key: file-2.txt
		  path: file-b.txt
		

=============================================================================================================================


					SECRETS
					~~~~~~~

To manage sensitive data in k8s such as username and password.
reduces risks of exposing sensitive data
all secrets will reside in etcd along with other objects
there is a limit for each secret size.
secrets can be max 1MB in size.
use secrets in two ways: mount them as volumes or expose them as env variables.
secret is sent only to the desired node which demands secrets.
each secret is stored in temp fs volume,so that other container cannot access this values.

Create secret in two ways:
 1. Kubectl	2. Manifest

1. Using kubectl:

>>> kubectl create secret [type][name][data]
	where data is in :	Path to dir/file= --from-file
				key-value pair= --from-literal

Steps for DEMO:
1. Create secret file using kubectl
2. consume above secrets in pod file
3. create | display | validate

We can encode and save values in file 
>>> echo -n 'admin' | base64


==================
secret using YAML file:
apiVersion: v1
kind: secret
metadata:
  name: nginx-secret-env
type: Opaque
data:
  username: YWasdlk2
  password: aslkdj21234	#encoded in base64

In ppod file for environment, use env section in containers section.

containers:
  env:
  - name: SECRET_USERNAME
    valueFrom:
      secretKeyRef:
        name: nginx-secret-env
        key: username
  - name: SECRET_PASSWORD
    valueFrom:
      secretKeyRef:
        name: nginx-secret-env
        key: password
restartPolicy: Never
